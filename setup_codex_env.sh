#!/usr/bin/env bash
set -euo pipefail

echo "🚀 Setting up WristLingo Codex Development Environment..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Project-specific versions (from gradle/libs.versions.toml and gradle.properties)
ANDROID_SDK_VERSION="36"
ANDROID_BUILD_TOOLS_VERSION="36.0.0"
ANDROID_NDK_VERSION="29.0.14033849"
KOTLIN_VERSION="2.2.20"
AGP_VERSION="8.12.3"
JAVA_VERSION="21"

echo -e "${BLUE}📋 WristLingo Project Configuration:${NC}"
echo "  • Android SDK: $ANDROID_SDK_VERSION"
echo "  • Build Tools: $ANDROID_BUILD_TOOLS_VERSION"
echo "  • NDK: $ANDROID_NDK_VERSION"
echo "  • Kotlin: $KOTLIN_VERSION"
echo "  • AGP: $AGP_VERSION"
echo "  • Java: $JAVA_VERSION"
echo "  • Modules: app, wear, core"
echo "  • Flavors: offline, hybrid, cloudstt"
echo ""

# Update package lists
echo -e "${YELLOW}📦 Updating package lists...${NC}"
sudo apt-get update -qq

# Install essential build tools
echo -e "${YELLOW}🔧 Installing essential build tools...${NC}"
sudo apt-get install -yqq \
  build-essential \
  curl \
  wget \
  git \
  unzip \
  zip \
  ca-certificates \
  gnupg2 \
  software-properties-common \
  apt-transport-https \
  libreadline-dev \
  zlib1g-dev \
  libyaml-dev \
  libssl-dev \
  libffi-dev \
  libsqlite3-dev \
  libbz2-dev \
  libncurses5-dev \
  libgdbm-dev \
  liblzma-dev \
  tk-dev

# Install Java 21 (required for Kotlin 2.2.20 and AGP 8.12.3)
echo -e "${YELLOW}☕ Installing OpenJDK $JAVA_VERSION...${NC}"
sudo apt-get install -yqq openjdk-$JAVA_VERSION-jdk openjdk-$JAVA_VERSION-jre

# Set JAVA_HOME
export JAVA_HOME=/usr/lib/jvm/java-$JAVA_VERSION-openjdk-amd64
echo "export JAVA_HOME=$JAVA_HOME" >> ~/.bashrc
echo -e "${GREEN}✅ Java $JAVA_VERSION installed${NC}"

# Install Android SDK
echo -e "${YELLOW}📱 Setting up Android SDK...${NC}"
ANDROID_HOME="$HOME/Android/Sdk"
mkdir -p "$ANDROID_HOME"

# Download and install Android command line tools
CMDTOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip"
CMDTOOLS_ZIP="/tmp/cmdtools.zip"
wget -q "$CMDTOOLS_URL" -O "$CMDTOOLS_ZIP"
unzip -q "$CMDTOOLS_ZIP" -d "$ANDROID_HOME"
mv "$ANDROID_HOME/cmdline-tools" "$ANDROID_HOME/cmdline-tools-temp"
mkdir -p "$ANDROID_HOME/cmdline-tools/latest"
mv "$ANDROID_HOME/cmdline-tools-temp"/* "$ANDROID_HOME/cmdline-tools/latest/"
rm -rf "$ANDROID_HOME/cmdline-tools-temp" "$CMDTOOLS_ZIP"

# Set Android environment variables
export ANDROID_HOME="$HOME/Android/Sdk"
export PATH="$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools"
echo "export ANDROID_HOME=\$HOME/Android/Sdk" >> ~/.bashrc
echo "export PATH=\$PATH:\$ANDROID_HOME/cmdline-tools/latest/bin:\$ANDROID_HOME/platform-tools" >> ~/.bashrc

# Accept Android SDK licenses
yes | sdkmanager --licenses || true

# Install required Android SDK components for WristLingo
echo -e "${YELLOW}📲 Installing Android SDK components...${NC}"
sdkmanager \
  "platforms;android-$ANDROID_SDK_VERSION" \
  "build-tools;$ANDROID_BUILD_TOOLS_VERSION" \
  "ndk;$ANDROID_NDK_VERSION" \
  "platform-tools" \
  "emulator" \
  "system-images;android-$ANDROID_SDK_VERSION;google_apis;x86_64" \
  "system-images;android-30;android-wear;x86" \
  "extras;google;google_play_services" \
  "extras;google;m2repository" \
  "extras;android;m2repository"

echo -e "${GREEN}✅ Android SDK setup complete${NC}"

# Install Git LFS (for large binary files)
echo -e "${YELLOW}📁 Installing Git LFS...${NC}"
curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
sudo apt-get install -yqq git-lfs
git lfs install --global

# Clone or update WristLingo repository if needed
if [ ! -d "/workspace/WristLingo" ]; then
    echo -e "${YELLOW}📂 Cloning WristLingo repository...${NC}"
    git clone https://github.com/yourusername/WristLingo.git /workspace/WristLingo || {
        echo -e "${BLUE}ℹ️  Clone failed - assuming local development setup${NC}"
        mkdir -p /workspace/WristLingo
    }
fi

# Navigate to project directory
cd /workspace/WristLingo || cd /home/boypa/projects/WristLingo

# Set up local.properties for Android SDK
echo -e "${YELLOW}⚙️  Configuring local.properties...${NC}"
cat > local.properties << EOF
# Automatically generated by WristLingo setup script
sdk.dir=$ANDROID_HOME
ndk.dir=$ANDROID_HOME/ndk/$ANDROID_NDK_VERSION
EOF

# Grant execute permissions to Gradle wrapper
chmod +x ./gradlew

# Download Gradle dependencies and verify project setup
echo -e "${YELLOW}📦 Downloading project dependencies...${NC}"
./gradlew dependencies --configuration releaseCompileClasspath > /dev/null 2>&1 || {
    echo -e "${BLUE}ℹ️  Initial dependency download - this is normal${NC}"
}

# Verify build for all modules and flavors
echo -e "${YELLOW}🔨 Verifying WristLingo build configuration...${NC}"
./gradlew clean build --dry-run

# Test specific WristLingo build flavors
echo -e "${YELLOW}🧪 Testing build flavors...${NC}"
./gradlew :app:assembleOfflineDebug --dry-run
./gradlew :wear:assembleOfflineDebug --dry-run
./gradlew :core:build --dry-run

# Install additional development tools
echo -e "${YELLOW}🛠️  Installing development tools...${NC}"

# Install Node.js (for any web tooling or documentation)
curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
sudo apt-get install -yqq nodejs

# Install useful development utilities
sudo apt-get install -yqq \
  htop \
  tree \
  jq \
  vim \
  nano \
  screen \
  tmux

# Set up Git configuration if not already set
if ! git config --global user.name > /dev/null 2>&1; then
    echo -e "${YELLOW}📝 Setting up Git configuration...${NC}"
    git config --global user.name "patricklarocque1"
    git config --global user.email "patrick.adrian1214@gmail.com"
fi

# Create useful aliases for WristLingo development
echo -e "${YELLOW}🔗 Setting up development aliases...${NC}"
cat >> ~/.bashrc << 'EOF'

# WristLingo Development Aliases
alias wl-build='./gradlew clean build'
alias wl-test='./gradlew test'
alias wl-app-debug='./gradlew :app:assembleOfflineDebug'
alias wl-wear-debug='./gradlew :wear:assembleOfflineDebug'
alias wl-install-app='./gradlew :app:installOfflineDebug'
alias wl-install-wear='./gradlew :wear:installOfflineDebug'
alias wl-check='./gradlew check'
alias wl-clean='./gradlew clean'
alias wl-deps='./gradlew dependencies'
alias wl-projects='./gradlew projects'
alias wl-tasks='./gradlew tasks'

# Android development shortcuts
alias adb-devices='adb devices'
alias adb-logcat='adb logcat'
alias adb-wear-logcat='adb -s $(adb devices | grep "watch\|wear" | head -1 | cut -f1) logcat'

EOF

# Verify final setup
echo -e "${YELLOW}🔍 Final verification...${NC}"
java -version
echo "Android SDK: $(ls -la $ANDROID_HOME/platforms/ | grep android-$ANDROID_SDK_VERSION || echo 'Installing...')"
./gradlew --version

# Success message
echo ""
echo -e "${GREEN}🎉 WristLingo Codex Environment Setup Complete!${NC}"
echo ""
echo -e "${BLUE}📋 What was installed:${NC}"
echo "  ✅ OpenJDK $JAVA_VERSION"
echo "  ✅ Android SDK $ANDROID_SDK_VERSION"
echo "  ✅ Android Build Tools $ANDROID_BUILD_TOOLS_VERSION"
echo "  ✅ Android NDK $ANDROID_NDK_VERSION"
echo "  ✅ Gradle wrapper configured"
echo "  ✅ Project dependencies downloaded"
echo "  ✅ Build verification successful"
echo "  ✅ Development aliases created"
echo ""
echo -e "${BLUE}🚀 Next steps:${NC}"
echo "  1. Restart your terminal or run: source ~/.bashrc"
echo "  2. Test build: wl-build"
echo "  3. Build debug APKs: wl-app-debug && wl-wear-debug"
echo "  4. Connect devices and install: wl-install-app && wl-install-wear"
echo ""
echo -e "${YELLOW}💡 Use 'wl-' prefix for WristLingo-specific commands!${NC}"
echo -e "${GREEN}Environment ready for WristLingo development! 🎯${NC}"
